import{c as u,a as p,b as n,d as c,C,u as f,e as b}from"./vendor-fc9a2d20.js";const A={status:"idle",message:null,isInitialized:!1},d=u({name:"app",initialState:A,reducers:{setAppMessage(e,t){e.message=t.payload},setAppStatus(e,t){e.status=t.payload},setAppInitialized(e,t){e.isInitialized=t.payload}}}),{setAppMessage:o,setAppStatus:r,setAppInitialized:x}=d.actions,k=d.reducer,w=(e,t)=>{var i;const s=t;if(p.isAxiosError(s)){const a=(i=s.response)!=null&&i.data?s.response.data.error:s.message;e(o(a))}else e(o(`native error ${s.message}`));e(r("failed"))},m=p.create({baseURL:"https://api.openweathermap.org/data/2.5/"}),I={getSummary(e){return m.get(`weather?q=${e}&appid=d8b8feb797d8d7246525255551517358&units=metric`)},getHourly(e){return m.get(`forecast?q=${e}&appid=d8b8feb797d8d7246525255551517358&units=metric`)}},v={weather:[],currentDate:"",currentTime:"",currentCity:"",main:{},sys:{},wind:{},visibility:0},l=n("weather/getSummaryWeather",async(e,{dispatch:t})=>{t(r("loading"));try{const s=await I.getSummary(e);t(M({weather:s.data})),t(r("succeeded"))}catch(s){w(t,s)}}),z=n("weather/getCityFromLS",async(e,{dispatch:t})=>{const s=localStorage.getItem("current-city");if(s){const i=JSON.parse(s);t(y({city:i}))}}),W=n("weather/getWeather",async(e,{dispatch:t,getState:s})=>{t(z());const a=s().weather.currentCity;a?t(l(a)):(t(y({city:"Minsk"})),t(l("Minsk")))}),S=u({name:"weather",initialState:v,reducers:{setCurrentCity:(e,t)=>{e.currentCity=t.payload.city},setSummaryWeather:(e,t)=>{e.weather=t.payload.weather.weather,e.currentDate=c.unix(t.payload.weather.dt).format("DD.MM.YYYY"),e.currentTime=c.unix(t.payload.weather.dt).format("HH:mm"),e.main=t.payload.weather.main,e.sys={country:t.payload.weather.sys.country,id:t.payload.weather.sys.id,type:t.payload.weather.sys.type,sunrise:c.unix(t.payload.weather.sys.sunrise).format("HH:mm"),sunset:c.unix(t.payload.weather.sys.sunset).format("HH:mm")},e.wind=t.payload.weather.wind,e.visibility=t.payload.weather.visibility}}}),{setCurrentCity:y,setSummaryWeather:M}=S.actions,$=S.reducer,T={cities:[]},R=n("cities/getCities",async(e,{dispatch:t})=>{t(r("loading"));try{const s=C.getAllCities();t(H({cities:s})),t(r("succeeded"))}catch(s){w(t,s)}finally{t(x(!0))}}),U=n("cities/findCity",(e,{dispatch:t,getState:s})=>{t(r("loading"));const i=s();try{const a=i.cities.cities.filter(g=>g.name.toUpperCase()===e.toUpperCase())[0];a?(t(D(a.name)),t(l(a.name)),t(r("succeeded"))):(t(r("failed")),t(o(`${e} not found, try again`)))}catch(a){console.log(a),t(r("failed"))}}),D=n("cities/saveCurrentCity",async(e,{dispatch:t})=>{const s=JSON.stringify(e);localStorage.setItem("current-city",s),t(y({city:e}))}),h=u({name:"cities",initialState:T,reducers:{setCities:(e,t)=>{e.cities=t.payload.cities}}}),{setCities:H}=h.actions,Y=h.reducer,q=()=>f(),N=b,j=e=>e.app.status,J=e=>e.app.message,L=e=>e.app.isInitialized,O=e=>e.weather.weather,E=e=>e.weather.currentCity,F=e=>e.weather.currentTime,P=e=>e.weather.currentDate,B=e=>e.weather.main.temp,G=e=>e.weather.main.feels_like,K=e=>e.weather.main.temp_min,Q=e=>e.weather.main.temp_max,V=e=>e.weather.main.pressure,X=e=>e.weather.main.humidity,Z=e=>e.weather.sys.sunrise,ee=e=>e.weather.sys.sunset,te=e=>e.weather.wind.speed,se=e=>e.weather.visibility,ae=e=>Math.round(e);export{J as a,j as b,q as c,E as d,P as e,U as f,B as g,G as h,ae as i,K as j,ee as k,X as l,Q as m,te as n,W as o,V as p,L as q,R as r,Z as s,F as t,N as u,se as v,O as w,k as x,$ as y,Y as z};
